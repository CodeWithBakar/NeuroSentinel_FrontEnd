import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableFooter,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { useAuth } from "@/context/AuthContext";
import axios from "axios";
import { Download } from "lucide-react";
import { useEffect, useState } from "react";
import jsPDF from "jspdf";
import { toast } from "sonner";

export function ReportsList() {
  const { user } = useAuth();
  const [currentPatients, setCurrentPatients] = useState([]);

  // Fetch appointments for the current user (doctor)
  useEffect(() => {
    const fetchReports = async () => {
      try {
        const response = await axios.post(
          "http://localhost:9002/doctor/appointments",
          { doctorId: user.doctor._id }
        );
        setCurrentPatients([
          ...response.data.todayAppointments,
          ...response.data.upcomingAppointments,
        ]);
      } catch (error) {
        console.error("Error fetching appointments", error);
      }
    };

    fetchReports();
  }, [user._id]);

  // Fetch the report data for the selected patient
  const fetchReport = async (patientId) => {
    try {
      const response = await axios.post(
        "http://localhost:9002/patient/get-report",
        {
          patientId: patientId,
        },
        {
          headers: {
            "Content-Type": "application/json",
          },
        }
      );
      return response.data.reports?.[0];
    } catch (error) {
      console.error(error);
      return null;
    }
  };

  // Download the PDF report for the patient
  const downloadPdfReport = async (patientDetails) => {
    if (!patientDetails) {
      toast.error("No patient details provided");
      return;
    }

    // Fetch report data from the API
    const reportData = await fetchReport(patientDetails.patient);
    if (!reportData || reportData.length === 0) {
      toast.info("No report generated by you yet !");
      return;
    }

    const doc = new jsPDF();
    const title = "Tumor Detection Report";
    const date = new Date().toLocaleDateString();

    // Add title and general patient info
    doc.setFontSize(22);
    doc.text(title, 20, 20);
    doc.setFontSize(16);
    doc.text(
      `Patient Name: ${patientDetails.patient.user.firstName} ${patientDetails.patient.user.lastName}`,
      20,
      40
    );
    doc.text(`Date: ${date}`, 20, 50);

    // Add tumor detection details from the fetched report data

    // add image in report :

    const details = reportData; // Assuming this is the correct report data object
    const imgData = `http://localhost:9002/uploads/${reportData.imagePath}`;
    if (imgData) {
      doc.addImage(imgData, "PNG", 20, 16, 170, 100);
    }
    doc.setFontSize(14);
    doc.text(`Tumor Type: ${details.tumorType}`, 20, 70);
    doc.text(`Confidence: ${(details.confidence * 100).toFixed(2)}%`, 20, 80);
    doc.text(`Tumor Severity: ${details.tumorSeverity}`, 20, 90);
    doc.text(
      `Bounding Box (X_min, Y_min, X_max, Y_max): (${details.boxWidth}, ${details.boxHeight}, ${details.centerX}, ${details.centerY})`,
      20,
      100
    );
    doc.text(`Bounding Box Area: ${details.boxArea}`, 20, 110);
    doc.text(`Bounding Box Width: ${details.boxWidth}`, 20, 120);
    doc.text(`Bounding Box Height: ${details.boxHeight}`, 20, 130);
    doc.text(`Aspect Ratio: ${details.aspectRatio.toFixed(2)}`, 20, 140);
    doc.text(
      `Center Coordinates (X, Y): (${details.centerX}, ${details.centerY})`,
      20,
      150
    );

    // Save the PDF
    doc.save("Tumor_Detection_Report.pdf");
  };

  return (
    <ScrollArea className="h-full w-full">
      <Table>
        <TableCaption>A list of your current patients.</TableCaption>
        <TableHeader>
          <TableRow>
            <TableHead className="w-[300px]">Profile Image</TableHead>
            <TableHead>Name</TableHead>
            <TableHead>Email</TableHead>
            <TableHead>City</TableHead>
            <TableHead>Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {currentPatients.length > 0 ? (
            currentPatients.map((patient) => (
              <TableRow key={patient._id}>
                <TableCell>
                  <img
                    src={`http://localhost:9002/uploads/${patient.patient.user.profileImage}`}
                    alt={patient.patient.user.firstName}
                    className="h-10 w-10 rounded-full object-cover"
                  />
                </TableCell>
                <TableCell className="font-medium">
                  {patient.patient.user.firstName}{" "}
                  {patient.patient.user.lastName}
                </TableCell>
                <TableCell>{patient.patient.user.email}</TableCell>
                <TableCell>{patient.patient.user.city}</TableCell>
                <TableCell>
                  <Button
                    className={"flex gap-4 items-center"}
                    onClick={() => downloadPdfReport(patient)}
                  >
                    <Download className="w-6 h-6" />
                    Download
                  </Button>
                </TableCell>
              </TableRow>
            ))
          ) : (
            <TableRow>
              <TableCell colSpan={5} className="text-center">
                No patients found.
              </TableCell>
            </TableRow>
          )}
        </TableBody>
        <TableFooter>
          <TableRow>
            <TableCell colSpan={5}>
              Total Patients: {currentPatients.length}
            </TableCell>
          </TableRow>
        </TableFooter>
      </Table>
    </ScrollArea>
  );
}
